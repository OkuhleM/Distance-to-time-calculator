{"ast":null,"code":"import _slicedToArray from\"/home/tcg-pc1/workspace/Distance-to-time-calculator/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from'react';import{useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function DistanceToTime(){var _useState=useState({value:\"0\",walking:0,driving:0,flying:0}),_useState2=_slicedToArray(_useState,2),distance=_useState2[0],setDistance=_useState2[1];var averageSpeedWhenWalking=3.6;var averageSpeedWhenDriving=50;var averageSpeedWhenFlying=800;var updateDstanceValue=function updateDstanceValue(e){return setDistance({value:e.target.value,walking:(+e.target.value*60/averageSpeedWhenWalking).toFixed(0),driving:(+e.target.value*60/averageSpeedWhenDriving).toFixed(0),flying:(+e.target.value*60/averageSpeedWhenFlying).toFixed(0)});};var convertTime=function convertTime(n){var givenNumber=n;var convertedHours=givenNumber/60;var minutes=Math.floor(givenNumber/60);var minutesToBeReturned=((convertedHours-minutes)/60).toFixed(0);var convertedMinutes=Math.round(minutesToBeReturned);return minutes+\" hour(s) and \"+minutesToBeReturned+\" minutes\";};// function timeConvert(n) {\n//     var num = n;\n//     var hours = (num / 60);\n//     var rhours = Math.floor(hours);\n//     var minutes = (hours - rhours) * 60;\n//     var rminutes = Math.round(minutes);\n//     return num  + \" hour(s) and \" + rminutes + \" minute(s).\";\n//     }\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"form\",{className:\"container\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Enter The Distance In Km\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:distance.value,onChange:function onChange(e){return updateDstanceValue(e);}})]})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Distance When Walking:\"}),/*#__PURE__*/_jsx(\"p\",{children:convertTime(distance.walking)}),/*#__PURE__*/_jsx(\"h2\",{children:\"Distance When Driving:\"}),/*#__PURE__*/_jsx(\"p\",{children:convertTime(distance.driving)}),/*#__PURE__*/_jsx(\"h2\",{children:\"Distance When Using A Flight:\"}),/*#__PURE__*/_jsx(\"p\",{children:convertTime(distance.flying)})]})]});}","map":{"version":3,"sources":["/home/tcg-pc1/workspace/Distance-to-time-calculator/src/Components/DistanceToTime.js"],"names":["React","useState","DistanceToTime","value","walking","driving","flying","distance","setDistance","averageSpeedWhenWalking","averageSpeedWhenDriving","averageSpeedWhenFlying","updateDstanceValue","e","target","toFixed","convertTime","n","givenNumber","convertedHours","minutes","Math","floor","minutesToBeReturned","convertedMinutes","round"],"mappings":"yIAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,KAAyB,OAAzB,C,wFAEA,cAAe,SAASC,CAAAA,cAAT,EAA0B,CACrC,cAAgCD,QAAQ,CAAC,CAAEE,KAAK,CAAC,GAAR,CAAaC,OAAO,CAAE,CAAtB,CAAyBC,OAAO,CAAE,CAAlC,CAAqCC,MAAM,CAAE,CAA7C,CAAD,CAAxC,wCAAOC,QAAP,eAAiBC,WAAjB,eAEA,GAAIC,CAAAA,uBAAuB,CAAG,GAA9B,CACA,GAAIC,CAAAA,uBAAuB,CAAG,EAA9B,CACA,GAAIC,CAAAA,sBAAsB,CAAG,GAA7B,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,CAAC,QAAIL,CAAAA,WAAW,CAAC,CACxCL,KAAK,CAAEU,CAAC,CAACC,MAAF,CAASX,KADwB,CAExCC,OAAO,CAAE,CAAE,CAACS,CAAC,CAACC,MAAF,CAASX,KAAV,CAAkB,EAAnB,CAAyBM,uBAA1B,EAAmDM,OAAnD,CAA2D,CAA3D,CAF+B,CAGxCV,OAAO,CAAE,CAAE,CAACQ,CAAC,CAACC,MAAF,CAASX,KAAV,CAAkB,EAAnB,CAAyBO,uBAA1B,EAAmDK,OAAnD,CAA2D,CAA3D,CAH+B,CAIxCT,MAAM,CAAE,CAAE,CAACO,CAAC,CAACC,MAAF,CAASX,KAAV,CAAkB,EAAnB,CAAyBQ,sBAA1B,EAAkDI,OAAlD,CAA0D,CAA1D,CAJgC,CAAD,CAAf,EAA5B,CAQA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,CAAD,CAAO,CACvB,GAAIC,CAAAA,WAAW,CAAGD,CAAlB,CACA,GAAIE,CAAAA,cAAc,CAAID,WAAW,CAAG,EAApC,CACA,GAAIE,CAAAA,OAAO,CAAGC,IAAI,CAACC,KAAL,CAAWJ,WAAW,CAAG,EAAzB,CAAd,CACA,GAAIK,CAAAA,mBAAmB,CAAG,CAAC,CAACJ,cAAc,CAAGC,OAAlB,EAA6B,EAA9B,EAAkCL,OAAlC,CAA0C,CAA1C,CAA1B,CACA,GAAIS,CAAAA,gBAAgB,CAAGH,IAAI,CAACI,KAAL,CAAWF,mBAAX,CAAvB,CACA,MAAOH,CAAAA,OAAO,CAAG,eAAV,CAA6BG,mBAA7B,CAAqD,UAA5D,CACH,CAPD,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,mBACI,oCACI,aAAM,SAAS,CAAC,WAAhB,uBACI,oCACI,gDADJ,cAEI,cACI,IAAI,CAAC,QADT,CAEI,KAAK,CAAEhB,QAAQ,CAACJ,KAFpB,CAGI,QAAQ,CAAE,kBAACU,CAAD,QAAMD,CAAAA,kBAAkB,CAACC,CAAD,CAAxB,EAHd,EAFJ,GADJ,EADJ,cAaR,oCACY,8CADZ,cAEY,mBAAIG,WAAW,CAACT,QAAQ,CAACH,OAAV,CAAf,EAFZ,cAGY,8CAHZ,cAIY,mBAAIY,WAAW,CAACT,QAAQ,CAACF,OAAV,CAAf,EAJZ,cAKY,qDALZ,cAMY,mBAAIW,WAAW,CAACT,QAAQ,CAACD,MAAV,CAAf,EANZ,GAbQ,GADJ,CA0BH","sourcesContent":["import React from 'react';\nimport { useState } from 'react'\n\nexport default function DistanceToTime() {\n    const [distance, setDistance] = useState({ value:\"0\", walking: 0, driving: 0, flying: 0 });\n\n    var averageSpeedWhenWalking = 3.6;\n    var averageSpeedWhenDriving = 50;\n    var averageSpeedWhenFlying = 800;\n\n    const updateDstanceValue = e => setDistance({\n        value: e.target.value,\n        walking: ((+e.target.value * 60) / averageSpeedWhenWalking).toFixed(0),\n        driving: ((+e.target.value * 60) / averageSpeedWhenDriving).toFixed(0),\n        flying: ((+e.target.value * 60) / averageSpeedWhenFlying).toFixed(0),\n        \n    })\n\n    const convertTime = (n) => {\n        var givenNumber = n;\n        var convertedHours = (givenNumber / 60);\n        var minutes = Math.floor(givenNumber / 60);\n        var minutesToBeReturned = ((convertedHours - minutes) / 60).toFixed(0);\n        var convertedMinutes = Math.round(minutesToBeReturned);\n        return minutes + \" hour(s) and \" +  minutesToBeReturned   + \" minutes\";\n    }\n\n    // function timeConvert(n) {\n    //     var num = n;\n    //     var hours = (num / 60);\n    //     var rhours = Math.floor(hours);\n    //     var minutes = (hours - rhours) * 60;\n    //     var rminutes = Math.round(minutes);\n    //     return num  + \" hour(s) and \" + rminutes + \" minute(s).\";\n    //     }\n        \n\n\n    return (\n        <div>\n            <form className=\"container\">\n                <div>\n                    <h1>Enter The Distance In Km</h1>\n                    <input\n                        type=\"number\"\n                        value={distance.value}\n                        onChange={(e) =>updateDstanceValue(e)}\n                    >\n                    </input>\n                   \n                </div>\n            </form>\n<div>\n            <h2>Distance When Walking:</h2>\n            <p>{convertTime(distance.walking)}</p>\n            <h2>Distance When Driving:</h2>\n            <p>{convertTime(distance.driving)}</p>\n            <h2>Distance When Using A Flight:</h2>\n            <p>{convertTime(distance.flying)}</p>\n\n            </div>\n           \n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}