{"ast":null,"code":"var _jsxFileName = \"/home/tcg-pc1/workspace/Distance-to-time-calculator/src/Components/DistanceToTime.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DistanceToTime() {\n  _s();\n\n  const [distance, setDistance] = useState({\n    value: \"0\",\n    walking: 0,\n    driving: 0,\n    flying: 0\n  });\n  var averageSpeedWhenWalking = 3.6;\n  var averageSpeedWhenDriving = 50;\n  var averageSpeedWhenFlying = 800;\n\n  const updateDstanceValue = e => setDistance({\n    value: e.target.value,\n    walking: +e.target.value * 60 / averageSpeedWhenWalking,\n    driving: +e.target.value * 60 / averageSpeedWhenDriving,\n    flying: +e.target.value * 60 / averageSpeedWhenFlying\n  }); // var distancwhene = Number(n);\n\n\n  const distanceWhenWalking = () => {\n    var whour = (distance.walking - distance.walking % 60) / 60;\n    var wminutes = distance.walking % 60;\n    var wseconds = wminutes / 60;\n    console.log(\"walking\", `hours :${whour.toFixed(0)}, min :${wminutes.toFixed(0)}, sec: ${wseconds.toFixed(0)} `);\n    return `hours :${whour.toFixed(0)}, min :${wminutes.toFixed(0)}, sec: ${wseconds.toFixed(0)} `;\n  };\n\n  const distanceWhenDriving = () => {\n    var dhour = (distance.driving - distance.driving % 60) / 60;\n    var dminutes = distance.driving % 60;\n    var dseconds = dminutes / 60;\n    console.log(\"driving\", `hours :${dhour.toFixed(0)}, min :${dminutes.toFixed(0)}, sec: ${dseconds.toFixed(0)} `);\n    return `${(dhour.toFixed(0), \":hour(s)\")} ${(dminutes.toFixed(0), \":min\")} ${(dseconds.toFixed(0), \":sec\")} `;\n  };\n\n  const distanceWhenUsingAflight = () => {\n    var fhour = (distance.flying - distance.flying % 60) / 60;\n    var fminutes = distance.flying % 60;\n    var fseconds = fminutes / 60;\n    var flightTime = fhour + fminutes + fseconds;\n    console.log(\"flight\", `hours :${fhour.toFixed(0)}, min :${fminutes.toFixed(0)}, sec: ${fseconds.toFixed(0)} `);\n    return `${(fhour.toFixed(0), \":hour(s)\")} ${(fminutes.toFixed(0), \":min\")}  ${(fseconds.toFixed(0), \":sec\")} `;\n  }; //     const convertTime = (n) => {\n  //         var givenNumber = Number(n);\n  //         var convertedHours = (givenNumber / 60);\n  //         var hours = Math.floor(givenNumber / 60);\n  // var minutes = \n  //         // var hoursToBeReturned = ((convertedHours - hours) / 60);\n  //         // var convertedhours = Math.round(hoursToBeReturned);\n  //         if(hours > 1){\n  //         return hours + \" hours\";\n  //         }else{\n  //         return hours + \" hour\";\n  //     }\n  //     }\n  // function timeConvert(n) {\n  //     var num = n;\n  //     var hours = (num / 60);\n  //     var rhours = Math.floor(hours);\n  //     var hours = (hours - rhours) * 60;\n  //     var rhours = Math.round(hours);\n  //     return num  + \" hour(s) and \" + rminutes + \" minute(s).\";\n  //     }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Enter The Distance In Km\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: distance.value,\n          onChange: e => updateDstanceValue(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Distance When Walking:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: distanceWhenWalking(distance.walking)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Distance When Driving:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: distanceWhenDriving(distance.driving)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Distance When Using A Flight:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: distanceWhenUsingAflight(distance.flying)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DistanceToTime, \"P7LoMiq7PfWmEuSWcw6NB0fXKus=\");\n\n_c = DistanceToTime;\n\nvar _c;\n\n$RefreshReg$(_c, \"DistanceToTime\");","map":{"version":3,"sources":["/home/tcg-pc1/workspace/Distance-to-time-calculator/src/Components/DistanceToTime.js"],"names":["React","useState","DistanceToTime","distance","setDistance","value","walking","driving","flying","averageSpeedWhenWalking","averageSpeedWhenDriving","averageSpeedWhenFlying","updateDstanceValue","e","target","distanceWhenWalking","whour","wminutes","wseconds","console","log","toFixed","distanceWhenDriving","dhour","dminutes","dseconds","distanceWhenUsingAflight","fhour","fminutes","fseconds","flightTime"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react'\n\nexport default function DistanceToTime() {\n    const [distance, setDistance] = useState({ value:\"0\", walking: 0, driving: 0, flying: 0 });\n\n    var averageSpeedWhenWalking = 3.6;\n    var averageSpeedWhenDriving = 50;\n    var averageSpeedWhenFlying = 800;\n\n    const updateDstanceValue = e => setDistance({\n        value: e.target.value,\n        walking: ((+e.target.value * 60) / averageSpeedWhenWalking) ,\n        driving: ((+e.target.value * 60) / averageSpeedWhenDriving),\n        flying: ((+e.target.value * 60) / averageSpeedWhenFlying),\n        \n    })\n\n\n// var distancwhene = Number(n);\nconst distanceWhenWalking =()=>{\n    var whour = (distance.walking - distance.walking % 60 ) / 60;\n    var wminutes = distance.walking % 60;\n    var wseconds = wminutes / 60;\n    \n        console.log(\"walking\", `hours :${whour.toFixed(0)}, min :${wminutes.toFixed(0)}, sec: ${wseconds.toFixed(0)} `);\n        return `hours :${whour.toFixed(0)}, min :${wminutes.toFixed(0)}, sec: ${wseconds.toFixed(0)} `\n}\n    const distanceWhenDriving = () =>{\n    var dhour = (distance.driving - distance.driving % 60 ) / 60;\n    var dminutes = distance.driving % 60;\n    var dseconds = dminutes / 60;\n    \n    console.log(\"driving\", `hours :${dhour.toFixed(0)}, min :${dminutes.toFixed(0)}, sec: ${dseconds.toFixed(0)} `);\n    return  `${dhour.toFixed(0),\":hour(s)\"} ${dminutes.toFixed(0),\":min\"} ${dseconds.toFixed(0),\":sec\"} `\n    }\n\n    const distanceWhenUsingAflight = ()=>{\n    var fhour = (distance.flying - distance.flying % 60 ) / 60;\n    var fminutes = distance.flying % 60;\n    var fseconds = fminutes/60;\n    var flightTime = fhour + fminutes + fseconds\n    console.log(\"flight\", `hours :${fhour.toFixed(0)}, min :${fminutes.toFixed(0)}, sec: ${fseconds.toFixed(0)} `);\n    return `${fhour.toFixed(0),\":hour(s)\"} ${fminutes.toFixed(0),\":min\"}  ${fseconds.toFixed(0),\":sec\"} `\n    }\n    \n\n\n\n//     const convertTime = (n) => {\n//         var givenNumber = Number(n);\n//         var convertedHours = (givenNumber / 60);\n//         var hours = Math.floor(givenNumber / 60);\n// var minutes = \n//         // var hoursToBeReturned = ((convertedHours - hours) / 60);\n\n//         // var convertedhours = Math.round(hoursToBeReturned);\n//         if(hours > 1){\n//         return hours + \" hours\";\n\n//         }else{\n//         return hours + \" hour\";\n//     }\n//     }\n    // function timeConvert(n) {\n    //     var num = n;\n    //     var hours = (num / 60);\n    //     var rhours = Math.floor(hours);\n    //     var hours = (hours - rhours) * 60;\n    //     var rhours = Math.round(hours);\n    //     return num  + \" hour(s) and \" + rminutes + \" minute(s).\";\n    //     }\n        \n\n\n    return (\n        <div>\n            <form className=\"container\">\n                <div>\n                    <h1>Enter The Distance In Km</h1>\n                    <input\n                        type=\"number\"\n                        value={distance.value}\n                        onChange={(e) =>updateDstanceValue(e)}\n                    >\n                    </input>\n                   \n                </div>\n            </form>\n<div>\n            <h2>Distance When Walking:</h2>\n            <p>{distanceWhenWalking(distance.walking)}</p>\n            <h2>Distance When Driving:</h2>\n            <p>{distanceWhenDriving(distance.driving)}</p>\n            <h2>Distance When Using A Flight:</h2>\n            <p>{distanceWhenUsingAflight(distance.flying)}</p>\n\n            </div>\n           \n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}