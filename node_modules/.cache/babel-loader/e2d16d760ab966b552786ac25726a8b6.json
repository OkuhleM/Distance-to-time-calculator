{"ast":null,"code":"var _jsxFileName = \"/home/tcg-pc1/workspace/Distance-to-time-calculator/src/Components/DistanceToTime.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DistanceToTime() {\n  _s();\n\n  const [distance, setDistance] = useState({\n    value: \"0\",\n    walking: 0,\n    driving: 0,\n    flying: 0\n  });\n  var averageSpeedWhenWalking = 3.6;\n  var averageSpeedWhenDriving = 50;\n  var averageSpeedWhenFlying = 800;\n\n  const updateDstanceValue = e => setDistance({\n    value: e.target.value,\n    walking: (+e.target.value * 60 / averageSpeedWhenWalking).toFixed(2),\n    driving: (+e.target.value * 60 / averageSpeedWhenDriving).toFixed(2),\n    flying: (+e.target.value * 60 / averageSpeedWhenFlying).toFixed(2)\n  });\n\n  const convertTime = n => {\n    var givenNumber = n;\n    var convertedHours = givenNumber / 60;\n    var minutes = Math.floor(convertedHours) * 60;\n    var minutesToBeReturned = convertedHours - minutes;\n    var convertedMinutes = Math.round(minutesToBeReturned);\n    return givenNumber + \" minutes\" + minutes + \" hours\";\n  };\n\n  function timeConvert(n) {\n    var num = n;\n    var hours = num / 60;\n    var rhours = Math.floor(hours);\n    var minutes = (hours - rhours) * 60;\n    var rminutes = Math.round(minutes);\n    return num + \" minutes = \" + rhours + \" hour(s) and \" + rminutes + \" minute(s).\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Enter The Distance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 48\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: distance.value,\n          onChange: e => updateDstanceValue(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: distance.walking\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: distance.driving\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: distance.flying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DistanceToTime, \"P7LoMiq7PfWmEuSWcw6NB0fXKus=\");\n\n_c = DistanceToTime;\n\nvar _c;\n\n$RefreshReg$(_c, \"DistanceToTime\");","map":{"version":3,"sources":["/home/tcg-pc1/workspace/Distance-to-time-calculator/src/Components/DistanceToTime.js"],"names":["React","useState","DistanceToTime","distance","setDistance","value","walking","driving","flying","averageSpeedWhenWalking","averageSpeedWhenDriving","averageSpeedWhenFlying","updateDstanceValue","e","target","toFixed","convertTime","n","givenNumber","convertedHours","minutes","Math","floor","minutesToBeReturned","convertedMinutes","round","timeConvert","num","hours","rhours","rminutes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react'\n\nexport default function DistanceToTime() {\n    const [distance, setDistance] = useState({ value:\"0\", walking: 0, driving: 0, flying: 0 });\n\n    var averageSpeedWhenWalking = 3.6;\n    var averageSpeedWhenDriving = 50;\n    var averageSpeedWhenFlying = 800;\n\n    const updateDstanceValue = e => setDistance({\n        value: e.target.value,\n        walking: ((+e.target.value * 60) / averageSpeedWhenWalking).toFixed(2),\n        driving: ((+e.target.value * 60) / averageSpeedWhenDriving).toFixed(2),\n        flying: ((+e.target.value * 60) / averageSpeedWhenFlying).toFixed(2),\n        \n    })\n\n    const convertTime = (n) => {\n        var givenNumber = n;\n        var convertedHours = givenNumber / 60;\n        var minutes = Math.floor(convertedHours) * 60;\n        var minutesToBeReturned = (convertedHours - minutes);\n        var convertedMinutes = Math.round(minutesToBeReturned);\n        return givenNumber + \" minutes\" + minutes + \" hours\";\n    }\n\n\n\nfunction timeConvert(n) {\nvar num = n;\nvar hours = (num / 60);\nvar rhours = Math.floor(hours);\nvar minutes = (hours - rhours) * 60;\nvar rminutes = Math.round(minutes);\nreturn num + \" minutes = \" + rhours + \" hour(s) and \" + rminutes + \" minute(s).\";\n}\n    \n\n\n\n    return (\n        <div>\n            <form className=\"container\">\n                <div>\n                    <h1>Enter The Distance</h1><hr />\n                    <input\n                        type=\"number\"\n                        value={distance.value}\n                        onChange={(e) =>updateDstanceValue(e)}\n                    >\n                    </input>\n                </div>\n            </form>\n\n            <p>{distance.walking}</p>\n            <p>{distance.driving}</p>\n            <p>{distance.flying}</p>\n\n\n           \n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}