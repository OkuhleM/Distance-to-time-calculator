{"ast":null,"code":"var _jsxFileName = \"/home/tcg-pc1/workspace/Distance-to-time-calculator/src/Components/DistanceToTime.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DistanceToTime() {\n  _s();\n\n  const [distance, setDistance] = useState({\n    value: \"0\",\n    walking: 0,\n    driving: 0,\n    flying: 0\n  });\n  var averageSpeedWhenWalking = 3.6;\n  var averageSpeedWhenDriving = 50;\n  var averageSpeedWhenFlying = 800;\n\n  const updateDstanceValue = e => setDistance({\n    value: e.target.value,\n    walking: (+e.target.value / averageSpeedWhenWalking).toFixed(0),\n    driving: (+e.target.value / averageSpeedWhenDriving).toFixed(0),\n    flying: (+e.target.value / averageSpeedWhenFlying).toFixed(0)\n  });\n\n  const convertTime = n => {\n    console.log('n', typeof n);\n    var givenNumber = n;\n    var convertedHours = givenNumber / 60;\n    var hours = Math.floor(givenNumber / 60);\n    var hoursToBeReturned = ((convertedHours - hours) / 60).toFixed(0); // var convertedhours = Math.round(hoursToBeReturned);\n\n    if (hours > 1) {\n      return hours + \" hours\";\n    } else {\n      return hours + \" hour\";\n    }\n  }; // function timeConvert(n) {\n  //     var num = n;\n  //     var hours = (num / 60);\n  //     var rhours = Math.floor(hours);\n  //     var hours = (hours - rhours) * 60;\n  //     var rhours = Math.round(hours);\n  //     return num  + \" hour(s) and \" + rhours + \" minute(s).\";\n  //     }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Enter The Distance In Km\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: distance.value,\n          onChange: e => updateDstanceValue(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Distance When Walking:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: convertTime(distance.walking)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Distance When Driving:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: convertTime(distance.driving)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Distance When Using A Flight:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: convertTime(distance.flying)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DistanceToTime, \"1rkkns6XJXFyVyzKqPQi8867qE0=\");\n\n_c = DistanceToTime;\n\nvar _c;\n\n$RefreshReg$(_c, \"DistanceToTime\");","map":{"version":3,"sources":["/home/tcg-pc1/workspace/Distance-to-time-calculator/src/Components/DistanceToTime.js"],"names":["React","useState","DistanceToTime","distance","setDistance","value","walking","driving","flying","averageSpeedWhenWalking","averageSpeedWhenDriving","averageSpeedWhenFlying","updateDstanceValue","e","target","toFixed","convertTime","n","console","log","givenNumber","convertedHours","hours","Math","floor","hoursToBeReturned"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react'\n\nexport default function DistanceToTime() {\n    const [distance, setDistance] = useState({ value: \"0\", walking: 0, driving: 0, flying: 0 });\n\n    var averageSpeedWhenWalking = 3.6;\n    var averageSpeedWhenDriving = 50;\n    var averageSpeedWhenFlying = 800;\n\n    const updateDstanceValue = e => setDistance({\n        value: e.target.value,\n        walking: ((+e.target.value ) / averageSpeedWhenWalking).toFixed(0),\n        driving: ((+e.target.value ) / averageSpeedWhenDriving).toFixed(0),\n        flying: ((+e.target.value ) / averageSpeedWhenFlying).toFixed(0),\n\n    })\n\n    const convertTime = (n) => {\n        console.log('n',typeof(n));\n        var givenNumber = n;\n        var convertedHours = (givenNumber / 60);\n        var hours = Math.floor(givenNumber / 60);\n        var hoursToBeReturned = ((convertedHours - hours) / 60).toFixed(0);\n        // var convertedhours = Math.round(hoursToBeReturned);\n\n        if (hours > 1) {\n            return hours + \" hours\";\n\n        } else {\n            return hours + \" hour\";\n        }\n    }\n    // function timeConvert(n) {\n    //     var num = n;\n    //     var hours = (num / 60);\n    //     var rhours = Math.floor(hours);\n    //     var hours = (hours - rhours) * 60;\n    //     var rhours = Math.round(hours);\n    //     return num  + \" hour(s) and \" + rhours + \" minute(s).\";\n    //     }\n\n\n\n    return (\n        <div>\n            <form className=\"container\">\n                <div>\n                    <h1>Enter The Distance In Km</h1>\n                    <input\n                        type=\"number\"\n                        value={distance.value}\n                        onChange={(e) => updateDstanceValue(e)}\n                    >\n                    </input>\n\n                </div>\n            </form>\n            <div>\n                <h2>Distance When Walking:</h2>\n                <p>{convertTime(distance.walking)}</p>\n                <h2>Distance When Driving:</h2>\n                <p>{convertTime(distance.driving)}</p>\n                <h2>Distance When Using A Flight:</h2>\n                <p>{convertTime(distance.flying)}</p>\n\n            </div>\n\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}