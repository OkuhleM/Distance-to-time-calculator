{"ast":null,"code":"var _jsxFileName = \"/home/tcg-pc1/workspace/Distance-to-time-calculator/src/Components/DistanceToTime.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DistanceToTime() {\n  _s();\n\n  const [distance, setDistance] = useState({\n    value: \"0\",\n    walking: 0,\n    driving: 0,\n    flying: 0\n  });\n  var averageSpeedWhenWalking = 3.6;\n  var averageSpeedWhenDriving = 50;\n  var averageSpeedWhenFlying = 800;\n\n  const updateDstanceValue = e => setDistance({\n    value: e.target.value,\n    walking: +e.target.value * 60 / averageSpeedWhenWalking,\n    driving: +e.target.value * 60 / averageSpeedWhenDriving,\n    flying: +e.target.value * 60 / averageSpeedWhenFlying\n  });\n\n  var whour = (distance.walking - distance.walking % 60) / 60;\n  var wminutes = distance.walking % 60;\n  var wseconds = wminutes % 60;\n  console.log(\"walking\", `hours :${whour.toFixed(0)}, min :${wminutes.toFixed(0)}, sec: ${wseconds.toFixed(0)} `);\n  var dhour = (distance.driving - distance.driving % 60) / 60;\n  var dminutes = distance.driving % 60;\n  var dseconds = dminutes % 60;\n  console.log(\"driving\", `hours :${dhour.toFixed(0)}, min :${dminutes.toFixed(0)}, sec: ${dseconds.toFixed(0)} `);\n  var fhour = (distance.flying - distance.flying % 60) / 60;\n  var fminutes = distance.flying % 60;\n  var fseconds = fminutes / 60;\n  console.log(\"flight\", `hours :${fhour.toFixed(0)}, min :${fminutes.toFixed(0)}, sec: ${fseconds.toFixed(0)} `); //     const convertTime = (n) => {\n  //         var givenNumber = Number(n);\n  //         var convertedHours = (givenNumber / 60);\n  //         var hours = Math.floor(givenNumber / 60);\n  // var minutes = \n  //         // var hoursToBeReturned = ((convertedHours - hours) / 60);\n  //         // var convertedhours = Math.round(hoursToBeReturned);\n  //         if(hours > 1){\n  //         return hours + \" hours\";\n  //         }else{\n  //         return hours + \" hour\";\n  //     }\n  //     }\n  // function timeConvert(n) {\n  //     var num = n;\n  //     var hours = (num / 60);\n  //     var rhours = Math.floor(hours);\n  //     var hours = (hours - rhours) * 60;\n  //     var rhours = Math.round(hours);\n  //     return num  + \" hour(s) and \" + rminutes + \" minute(s).\";\n  //     }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Enter The Distance In Km\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: distance.value,\n          onChange: e => updateDstanceValue(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Distance When Walking:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: distance.walking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Distance When Driving:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: distance.driving\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Distance When Using A Flight:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: distance.flying\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DistanceToTime, \"P7LoMiq7PfWmEuSWcw6NB0fXKus=\");\n\n_c = DistanceToTime;\n\nvar _c;\n\n$RefreshReg$(_c, \"DistanceToTime\");","map":{"version":3,"sources":["/home/tcg-pc1/workspace/Distance-to-time-calculator/src/Components/DistanceToTime.js"],"names":["React","useState","DistanceToTime","distance","setDistance","value","walking","driving","flying","averageSpeedWhenWalking","averageSpeedWhenDriving","averageSpeedWhenFlying","updateDstanceValue","e","target","whour","wminutes","wseconds","console","log","toFixed","dhour","dminutes","dseconds","fhour","fminutes","fseconds"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react'\n\nexport default function DistanceToTime() {\n    const [distance, setDistance] = useState({ value:\"0\", walking: 0, driving: 0, flying: 0 });\n\n    var averageSpeedWhenWalking = 3.6;\n    var averageSpeedWhenDriving = 50;\n    var averageSpeedWhenFlying = 800;\n\n    const updateDstanceValue = e => setDistance({\n        value: e.target.value,\n        walking: ((+e.target.value * 60) / averageSpeedWhenWalking) ,\n        driving: ((+e.target.value * 60) / averageSpeedWhenDriving),\n        flying: ((+e.target.value * 60) / averageSpeedWhenFlying),\n        \n    })\n\n\nvar whour = (distance.walking - distance.walking % 60 ) / 60;\nvar wminutes = distance.walking % 60;\nvar wseconds = wminutes % 60;\n\n    console.log(\"walking\", `hours :${whour.toFixed(0)}, min :${wminutes.toFixed(0)}, sec: ${wseconds.toFixed(0)} `);\n\nvar dhour = (distance.driving - distance.driving % 60 ) / 60;\nvar dminutes = distance.driving % 60;\nvar dseconds = dminutes % 60;\n\nconsole.log(\"driving\", `hours :${dhour.toFixed(0)}, min :${dminutes.toFixed(0)}, sec: ${dseconds.toFixed(0)} `);\n\nvar fhour = (distance.flying - distance.flying % 60 ) / 60;\nvar fminutes = distance.flying % 60;\nvar fseconds = fminutes/60;\n\nconsole.log(\"flight\", `hours :${fhour.toFixed(0)}, min :${fminutes.toFixed(0)}, sec: ${fseconds.toFixed(0)} `);\n\n//     const convertTime = (n) => {\n//         var givenNumber = Number(n);\n//         var convertedHours = (givenNumber / 60);\n//         var hours = Math.floor(givenNumber / 60);\n// var minutes = \n//         // var hoursToBeReturned = ((convertedHours - hours) / 60);\n\n//         // var convertedhours = Math.round(hoursToBeReturned);\n//         if(hours > 1){\n//         return hours + \" hours\";\n\n//         }else{\n//         return hours + \" hour\";\n//     }\n//     }\n    // function timeConvert(n) {\n    //     var num = n;\n    //     var hours = (num / 60);\n    //     var rhours = Math.floor(hours);\n    //     var hours = (hours - rhours) * 60;\n    //     var rhours = Math.round(hours);\n    //     return num  + \" hour(s) and \" + rminutes + \" minute(s).\";\n    //     }\n        \n\n\n    return (\n        <div>\n            <form className=\"container\">\n                <div>\n                    <h1>Enter The Distance In Km</h1>\n                    <input\n                        type=\"number\"\n                        value={distance.value}\n                        onChange={(e) =>updateDstanceValue(e)}\n                    >\n                    </input>\n                   \n                </div>\n            </form>\n<div>\n            <h2>Distance When Walking:</h2>\n            <p>{distance.walking}</p>\n            <h2>Distance When Driving:</h2>\n            <p>{distance.driving}</p>\n            <h2>Distance When Using A Flight:</h2>\n            <p>{distance.flying}</p>\n\n            </div>\n           \n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}