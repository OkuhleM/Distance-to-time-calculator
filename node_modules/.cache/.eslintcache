[{"/home/tcg-pc1/workspace/Distance-to-time-calculator/my-app/src/index.js":"1","/home/tcg-pc1/workspace/Distance-to-time-calculator/my-app/src/App.js":"2","/home/tcg-pc1/workspace/Distance-to-time-calculator/my-app/src/reportWebVitals.js":"3","/home/tcg-pc1/workspace/Distance-to-time-calculator/my-app/src/Components/DistanceToTime.js":"4"},{"size":500,"mtime":1641888906907,"results":"5","hashOfConfig":"6"},{"size":234,"mtime":1641895038192,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1641888906907,"results":"8","hashOfConfig":"6"},{"size":1955,"mtime":1641977866915,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1nq2paa",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/home/tcg-pc1/workspace/Distance-to-time-calculator/my-app/src/index.js",[],["21","22"],"/home/tcg-pc1/workspace/Distance-to-time-calculator/my-app/src/App.js",["23"],"import logo from './logo.svg';\nimport './App.css';\nimport DistanceToTime from './Components/DistanceToTime';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n      <DistanceToTime />\n    </div>\n  );\n}\n\nexport default App;\n","/home/tcg-pc1/workspace/Distance-to-time-calculator/my-app/src/reportWebVitals.js",[],"/home/tcg-pc1/workspace/Distance-to-time-calculator/my-app/src/Components/DistanceToTime.js",["24"],"import React from 'react';\nimport { useState } from 'react'\n\nexport default function DistanceToTime() {\n    const [distance, setDistance] = React.useState({ walking: 0, driving: 0, flying: 0});\n   \n    var averageSpeedWhenWalking = 3.6;\n    var averageSpeedWhenDriving = 50;\n    var averageSpeedWhenFlying = 800;\n\n    const updateWalkingValue = e => setDistance ({\n        value: e.target.value,\n        walking: ((+e.target.value *60)/averageSpeedWhenWalking).toFixed(1),\n        driving: ((+e.target.value *60)/averageSpeedWhenDriving).toFixed(0),\n        flying: ((+e.target.value *60)/averageSpeedWhenFlying ).toFixed(1)\n    })\n    const updateDrivingValue = e => setDistance ({\n        value: e.target.value,\n        driving: ((+e.target.value *60)/averageSpeedWhenDriving).toFixed(2),\n        \n    })\n\n    const updateFlyingValue = e => setDistance ({\n        value: e.target.value,\n        flying: ((+e.target.value *60)/averageSpeedWhenFlying ).toFixed(1)\n\n        \n    })\n\n   \n\n    return (\n        <div>\n               <form className=\"container\">\n               <div>\n        <h1>Enter The Distance</h1>\n        <input\n            type = \"number\"\n            value = {distance.value}\n            onChange = {updateWalkingValue} >\n          </input>\n          </div>\n      \n                    Distance When Walking:<br/>\n                    <input type=\"number\" \n                    value = {distance.walking} \n                    onChange = {updateWalkingValue}></input><br/>\n                    Distance when Driving<br/>\n                    <input type=\"number\" \n                    value = {distance.driving} \n                    onChange = {updateDrivingValue}></input><br/>\n                    Distance When Flight<br/>\n                    <input type=\"number\" \n                    value = {distance.flying} \n                    onChange = {updateFlyingValue}></input><br/>\n                \n                </form>\n        </div>\n    )\n}\n",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":1,"column":8,"nodeType":"31","messageId":"32","endLine":1,"endColumn":12},{"ruleId":"29","severity":1,"message":"33","line":2,"column":10,"nodeType":"31","messageId":"32","endLine":2,"endColumn":18},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]