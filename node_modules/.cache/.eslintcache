[{"/home/tcg-pc1/workspace/Distance-to-time-calculator/src/index.js":"1","/home/tcg-pc1/workspace/Distance-to-time-calculator/src/App.js":"2","/home/tcg-pc1/workspace/Distance-to-time-calculator/src/reportWebVitals.js":"3","/home/tcg-pc1/workspace/Distance-to-time-calculator/src/Components/DistanceToTime.js":"4"},{"size":500,"mtime":1641888906907,"results":"5","hashOfConfig":"6"},{"size":204,"mtime":1641983286165,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1641888906907,"results":"8","hashOfConfig":"6"},{"size":2155,"mtime":1644317077534,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"15spomd",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/tcg-pc1/workspace/Distance-to-time-calculator/src/index.js",[],["20","21"],"/home/tcg-pc1/workspace/Distance-to-time-calculator/src/App.js",[],"/home/tcg-pc1/workspace/Distance-to-time-calculator/src/reportWebVitals.js",[],"/home/tcg-pc1/workspace/Distance-to-time-calculator/src/Components/DistanceToTime.js",["22"],"import React from 'react';\nimport { useState } from 'react'\n\nexport default function DistanceToTime() {\n    const [distance, setDistance] = useState({ value:\"0\", walking: 0, driving: 0, flying: 0 });\n\n    var averageSpeedWhenWalking = 3.6;\n    var averageSpeedWhenDriving = 50;\n    var averageSpeedWhenFlying = 800;\n\n    const updateDstanceValue = e => setDistance({\n        value: e.target.value,\n        walking: ((+e.target.value * 60) / averageSpeedWhenWalking).toFixed(0),\n        driving: ((+e.target.value * 60) / averageSpeedWhenDriving).toFixed(0),\n        flying: ((+e.target.value * 60) / averageSpeedWhenFlying).toFixed(0),\n        \n    })\n\n    const convertTime = (n) => {\n        var givenNumber = n;\n        var convertedHours = (givenNumber / 60);\n        var minutes = Math.floor(givenNumber / 60);\n        var minutesToBeReturned = ((convertedHours - minutes) / 60).toFixed(0);\n        var convertedMinutes = Math.round(minutesToBeReturned);\n        return minutes + \" hour(s) and \" +  minutesToBeReturned   + \" minutes\";\n    }\n\n    // function timeConvert(n) {\n    //     var num = n;\n    //     var hours = (num / 60);\n    //     var rhours = Math.floor(hours);\n    //     var minutes = (hours - rhours) * 60;\n    //     var rminutes = Math.round(minutes);\n    //     return num  + \" hour(s) and \" + rminutes + \" minute(s).\";\n    //     }\n        \n\n\n    return (\n        <div>\n            <form className=\"container\">\n                <div>\n                    <h1>Enter The Distance In Km</h1>\n                    <input\n                        type=\"number\"\n                        value={distance.value}\n                        onChange={(e) =>updateDstanceValue(e)}\n                    >\n                    </input>\n                   \n                </div>\n            </form>\n<div>\n            <h2>Distance When Walking:</h2>\n            <p>{convertTime(distance.walking)}</p>\n            <h2>Distance When Driving:</h2>\n            <p>{convertTime(distance.driving)}</p>\n            <h2>Distance When Using A Flight:</h2>\n            <p>{convertTime(distance.flying)}</p>\n\n            </div>\n           \n        </div>\n    )\n}\n",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":24,"column":13,"nodeType":"29","messageId":"30","endLine":24,"endColumn":29},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'convertedMinutes' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]